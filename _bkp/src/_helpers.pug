- let iconsList = {};

//-
  ICON-SYMBOL
  -----------
  Used in `icon.pug` to create individual Icons.

  Parameters
  id {string}     The ID that wil be attached to the element. This value will be prepended with `icon-`.
  width {number}  The width of the symbol. This should not contain the unit type (px etc.)
  height {number} The height of the symbol. This should not contain the unit type (px etc.)

mixin icon-symbol({ id, width, height })
  - iconsList[id] = { width, height };
  
  symbol(id=`icon-${id}` viewBox=`0 0 ${width} ${height}`)
    if block
      block

//- ICON
  ------
  Creates an inline SVG.

  Parameters
  id {string}   The ID that is used to call the symbol. ID is equivalent to the icon-symbol ID set in `icon.pug`.

  Usage
  +icon({ id: 'close' })

mixin icon({ id })
  svg.icon(
    class=`icon--${id}`
    aria-hidden="true"
  )&attributes(iconsList[id])&attributes(attributes)
    use(xlink:href=`#icon-${id}`)

//- STYLESHEET
  ------------
  Links either external or relative stylesheets located in `websites/assets/css/`. Used at the top of templates.

  Parameters
  filename {string}     Name of the stylesheet. This should not be appended with the file exstension (.scss etc.)
  isExternal {boolean}  Determines wether the stylesheet is external or not. 

  Usage
  +stylesheet({ filename: 'global' })
  +stylesheet({ filename: 'https://externalcss.com', isExternal: true })

mixin stylesheet({ filename, isExternal })
  - const path = isExternal ? filename : `${WTC_RELROOT}/assets/css/${filename}.css`;
  
  link(rel="stylesheet" href=path crossorigin=isExternal)

//- SCRIPT
  --------
  A wrapper around a native HTML <script> tag.
  This mixin adds the `defer` attribute,
  as well as a `crossorigin` attribute (in dev environments).

  @param {string} src - The script tag's `src` attribute. Use as you would in HTML.

  Usage
  +script({ src: `${WTC_RELROOT}/path/to/my/file` })
  +script({
    src: "https://cdnjs.cloudflare.com/ajax/libs/gsap/3.5.1/gsap.min.js"
  })

mixin script({ src })
  - 
    const scriptAttrs = {
      defer: true,
      crossorigin: NODE_ENV === "development" || null,
      src,
    };

  script&attributes(scriptAttrs)&attributes(attributes)


//- LOCALSCRIPT
  --------
  Adds a local JavaScript file to the document.
  This handles support for ES+ modules
  and ES5 scripts with the nomodule attribute.

  Usage:
  +localScript({ filename: "homepage" })
  +localScript({ filename: "homepage.js" })
  
  Notes:
  - The ".js" extension is optional.
  - Files are expected to live in src/website/assets/js/

mixin localScript({ filename })
  - const path = `${WTC_RELROOT}/assets/js/`;
  - const needsExtension = filename.indexOf(".js") < 0;
  - let filenameES5 = filename;

  if needsExtension
    - filename += ".js";
    - filenameES5 += ".es5.js";
  else
    - filenameES5 = filename.split(".js")[0] + ".es5.js";

  +script({ src: `${path}${filename}` })(type="module")
  +script({ src: `${path}${filenameES5}` })(nomodule)


//- VENDORSCRIPT
  --------
  Adds a local script from a third-party vendor.

  Usage: 
  +vendorScript({ filename: "tweenmax.js" })
  +vendorScript({ filename: "tweenmax" })

  Notes:
  - The ".js" extension is optional.
  - Files are expected to live in src/website/assets/vendor/

mixin vendorScript({ filename })
  - const path = `${WTC_RELROOT}/assets/vendor/`;
  - const needsExtension = filename.indexOf(".js") < 0;

  if needsExtension
    - filename += ".js";

  +script({ src: `${path}${filename}` })


//- EXTERNALSCRIPT
  --------
  Adds a script based on an external URL.

  Usage: 
  +externalScript({
    url: https://cdnjs.cloudflare.com/ajax/libs/gsap/3.5.1/gsap.min.js
  })

mixin externalScript({ url })
  +script({ src: url })


//- IMG
  -----
  Used to display images. Image files exist in `assets/img/*`.

  Parameters
  src {string}      Name of the image. Prepended with the directory it belongs in, and apended with the file exstension.
  srcset {string}   Name of the images. Srcset will not work unless a -2x (retina) image exists in the same directory. The naming convention should follow `image.jpg` `image-2x.jpg`.
  alt {string}      A string to describe the image. If no `alt` is provided, defaults to an empt `alt` tag.
  lazy {boolean}    Whether or not to use lazy-loading for this image.
  width {number}    Width of the source image. Used when lazy-loading to prevent reflow.
  height {number}   Height of the source image. Used when lazy-loading to prevent reflow.
  
  Usage:

  +img({ src: 'global/main.png', alt: 'descriptive alt' })
  +img({ srcset: 'global/main.png', alt: 'descriptive alt' })
  
  // with lazy-loading:
  +img({
    srcset="someimg.png",
    width="450",
    height: "300",
    lazy: true 
  })

//- NOTE: This relies on JavaScript to populate img src when "lazy" is true.
mixin img({ src, alt, srcset, lazy, width, height })
  if srcset
    - const [path, extension] = srcset.split('.');
    - src = srcset
    - srcset = `${WTC_RELROOT}/assets/img/${srcset} 1x, ${WTC_RELROOT}/assets/img/${path}-2x.${extension} 2x`
  else
    - srcset = false
  
  - 
    const imgAttributes = {
      alt: alt || ""
    };

  if lazy
    - imgAttributes["data-src"] = `${WTC_RELROOT}/assets/img/${src}`;
    - imgAttributes["loading"] = "lazy";
    if width
      - imgAttributes["width"] = width;
    if height
      - imgAttributes["height"] = height;
  else 
    - imgAttributes["src"] = `${WTC_RELROOT}/assets/img/${src}`
  
  if lazy && srcset
    - imgAttributes["data-srcset"] = srcset;
  else if !lazy && srcset
    - imgAttributes["srcset"] = srcset

  img&attributes(imgAttributes)&attributes(attributes)