/// Strips the unit from a given value
///
/// @group helpers
///
/// @name Strip unit
///
/// @argument {number} $num
///
/// @return {number}
///
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

/// Apply styles for font aliasing.
///
/// @group helpers
///
/// @name Font smoothing
///
/// @argument {bool} $value [true] - True for light text on dark background and false for the opposite
///
@mixin font-smoothing($value: true) {
  @if $value {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  } @else {
    -webkit-font-smoothing: subpixel-antialiased;
    -moz-osx-font-smoothing: auto;
  }
}

/// Apply base styles for headings.
///
/// @group helpers
///
/// @name Font heading
///
@mixin font-heading() {
  font-family: var(--font-heading);
  font-weight: var(--font-weight-bold);
}

/// Returns a css cacl where the provided value is relative to the base font-size of the website.
/// Note that --font-base must declared on the :root and set on the html for this to work
///
/// @group helpers
///
/// @name Base rem
///
/// @param {number} $size - Number in pixel
///
/// @return {string} - css cacl formula
///
/// @example scss
///   :root {
///     --font-base: 16;
///   }
///
///   html {
///     font-size: calc(var(--font-base) * 1px);
///   }
///
///   .element {
///     font-size: base-rem(24px);
///   }
///
/// @example css
///   .element {
///     font-size: calc(26px / var(--font-base) * 1rem);
///   }
///
@function base-rem($size) {
  @return calc(#{$size} / var(--font-base) * 1rem);
}

/// Make an element absolute positioned and cover the whole parent.
///
/// @group helpers
///
/// @name Full absolute
///
@mixin full-absolute() {
  height: 100%;
  left: 0;
  position: absolute;
  top: 0;
  width: 100%;
}

/// Vertically align the children the element.
///
/// @group helpers
///
/// @name Vertical center
///
@mixin vertical-center() {
  align-items: center;
  display: flex;
  justify-content: center;
}

/// Returns the ratio in  percentage for two values. Strips the unit from the given value automatically.
///
/// @group helpers
///
/// @name Percent ratio
///
/// @param {number} $width - Width
///
/// @param {number} $height - Height
///
/// @return {number} - Ratio in percentage
///
/// @example scss
///   .element {
///     &::before {
///       padding-bottom: percent-ratio(300px, 300px);
///     }
///   }
///
/// @example css
///   .element {
///     &::before {
///       padding-bottom: 100%;
///     }
///   }
///
@function percent-ratio($width, $height) {
  @return (strip-unit($height) / strip-unit($width)) * 100%;
}

/// Creates a value which is a multiple of the global base-space.
/// Note: --base-space must be declared on the :root
///
/// @group helpers
///
/// @name Base space
///
/// @param {number} $multiplier
///
/// @return {string} - the css --base-space value or the calc formula
///
/// @example scss
///   :root {
///     --base-space: 8;
///   }
///
///   .element {
///     margin-left: space-by(2);
///   }
///
/// @example css
///   .element {
///     margin-left: calc(var(--base-space) * 2);
///   }
///
@function space-by($multiplier: false) {
  @if not $multiplier {
    @return var(--base-space);
  } @else if $multiplier == 1 {
    @return var(--base-space);
  } @else {
    @return calc(var(--base-space) * #{$multiplier});
  }
}

/// Makes an element respond like an image, with the correct ratio applied as pseudo element, useful for decorations and "floaters"
///
/// @group helpers
///
/// @name Replace image
///
/// @param {string} $img - the path to the image
///
/// @example scss
///   .element {
///     @include replace-image("img/my-decoration.png");
///   }
///
/// @example css
///   .element {
///     background-image: url("final-path-on-build/img/decoration.png")
///     background-repeat: no-repeat;
///     background-size: contain;
///
///     &::before {
///       content: "";
///       display: block;
///       padding-top: 230%;
///     }
///   }
///
@mixin replace-image($img) {
  background-image: image-url($img);
  background-repeat: no-repeat;
  background-size: contain;

  &::before {
    content: "";
    display: block;
    padding-top: percent-ratio(image-width($img), image-height($img));
  }
}

/// Applies base focus styles
/// Can be used in conjunction with `outline: none` to provide a contrast-safe focus ring.
///
/// @group helpers
///
/// @name Focus style
///
@mixin focus-style {
  box-shadow: 0px 0px 0px 2px var(--color-white),
    0px 0px 0px 4px var(--color-black);
}
